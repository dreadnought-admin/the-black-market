{"ast":null,"code":"var _jsxFileName = \"/home/dreadnought/Development/code/phase-5/black-market/client/src/components/NewRecordForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewRecordForm = _ref => {\n  _s();\n  let {\n    records,\n    setRecords,\n    currentUser\n  } = _ref;\n  const [formData, setFormData] = useState({\n    album_name: \"\",\n    artist_name: \"\",\n    album_cover: \"\",\n    condition: \"\",\n    genre: \"\",\n    release_date: \"\",\n    release_description: \"\",\n    record_labels: \"\",\n    spotify_link: \"\",\n    price: 0.00\n  });\n  const navigate = useNavigate();\n  const [errors, setErrors] = useState([]);\n  const formDataBody = {\n    ...formData,\n    user_id: currentUser.id\n  };\n  const onAddRecord = () => {\n    fetch(\"/records\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formDataBody)\n    }).then(r => {\n      if (r.ok) {\n        r.json().then(newRecord => {\n          setRecords([...records, newRecord]);\n          navigate(\"/records\");\n        });\n      } else {\n        r.json().then(json => setErrors(Object.entries(json.errors)));\n      }\n    });\n  };\n  const onFormChange = e => {\n    let newForm = {\n      ...formData\n    };\n    newForm[e.target.id] = e.target.value;\n    setFormData(newForm);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddRecord();\n  };\n  const handleChange = e => {\n    onFormChange();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(NewRecordForm, \"if45vMcvPgaWKAYWNBesZ8VGUJA=\", false, function () {\n  return [useNavigate];\n});\n_c = NewRecordForm;\nexport default NewRecordForm;\nvar _c;\n$RefreshReg$(_c, \"NewRecordForm\");","map":{"version":3,"names":["React","useState","useNavigate","NewRecordForm","records","setRecords","currentUser","formData","setFormData","album_name","artist_name","album_cover","condition","genre","release_date","release_description","record_labels","spotify_link","price","navigate","errors","setErrors","formDataBody","user_id","id","onAddRecord","fetch","method","headers","body","JSON","stringify","then","r","ok","json","newRecord","Object","entries","onFormChange","e","newForm","target","value","handleSubmit","preventDefault","handleChange"],"sources":["/home/dreadnought/Development/code/phase-5/black-market/client/src/components/NewRecordForm.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nconst NewRecordForm = ({ records, setRecords, currentUser }) => {\n\n  const [formData, setFormData] = useState({\n    album_name: \"\",\n    artist_name: \"\",\n    album_cover: \"\",\n    condition: \"\",\n    genre: \"\",\n    release_date: \"\",\n    release_description: \"\",\n    record_labels: \"\",\n    spotify_link: \"\",\n    price: 0.00\n  })\n\n  const navigate = useNavigate();\n\n  const [errors, setErrors] = useState([]);\n\n  const formDataBody =  { ...formData, user_id: currentUser.id }\n\n  const onAddRecord = () => {\n  fetch(\"/records\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(formDataBody)\n  }).then((r) => {\n    if (r.ok) {\n      r.json().then((newRecord) => {\n        setRecords([...records, newRecord])\n        navigate(\"/records\")\n      })\n      } else { \n        r.json().then((json) => setErrors(Object.entries(json.errors)))\n      }\n    })\n  }\n\n  const onFormChange = (e) => {\n    let newForm = {... formData}\n    newForm[e.target.id]= e.target.value\n    setFormData(newForm)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onAddRecord(); \n  }\n\n  const handleChange = (e) => {\n    onFormChange();\n  }\n\n\n  return (\n    <div>\n      \n    </div>\n  )\n}\n\nexport default NewRecordForm\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAAA;AAE9C,MAAMC,aAAa,GAAG,QAA0C;EAAA;EAAA,IAAzC;IAAEC,OAAO;IAAEC,UAAU;IAAEC;EAAY,CAAC;EAEzD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,mBAAmB,EAAE,EAAE;IACvBC,aAAa,EAAE,EAAE;IACjBC,YAAY,EAAE,EAAE;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGjB,WAAW,EAAE;EAE9B,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMqB,YAAY,GAAI;IAAE,GAAGf,QAAQ;IAAEgB,OAAO,EAAEjB,WAAW,CAACkB;EAAG,CAAC;EAE9D,MAAMC,WAAW,GAAG,MAAM;IAC1BC,KAAK,CAAC,UAAU,EAAE;MAChBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;IACnC,CAAC,CAAC,CAACU,IAAI,CAAEC,CAAC,IAAK;MACb,IAAIA,CAAC,CAACC,EAAE,EAAE;QACRD,CAAC,CAACE,IAAI,EAAE,CAACH,IAAI,CAAEI,SAAS,IAAK;UAC3B/B,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAEgC,SAAS,CAAC,CAAC;UACnCjB,QAAQ,CAAC,UAAU,CAAC;QACtB,CAAC,CAAC;MACF,CAAC,MAAM;QACLc,CAAC,CAACE,IAAI,EAAE,CAACH,IAAI,CAAEG,IAAI,IAAKd,SAAS,CAACgB,MAAM,CAACC,OAAO,CAACH,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC;MACjE;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmB,YAAY,GAAIC,CAAC,IAAK;IAC1B,IAAIC,OAAO,GAAG;MAAC,GAAIlC;IAAQ,CAAC;IAC5BkC,OAAO,CAACD,CAAC,CAACE,MAAM,CAAClB,EAAE,CAAC,GAAEgB,CAAC,CAACE,MAAM,CAACC,KAAK;IACpCnC,WAAW,CAACiC,OAAO,CAAC;EACtB,CAAC;EAED,MAAMG,YAAY,GAAIJ,CAAC,IAAK;IAC1BA,CAAC,CAACK,cAAc,EAAE;IAClBpB,WAAW,EAAE;EACf,CAAC;EAED,MAAMqB,YAAY,GAAIN,CAAC,IAAK;IAC1BD,YAAY,EAAE;EAChB,CAAC;EAGD,oBACE;IAAA;IAAA;IAAA;EAAA,QAEM;AAEV,CAAC;AAAA,GA7DKpC,aAAa;EAAA,QAeAD,WAAW;AAAA;AAAA,KAfxBC,aAAa;AA+DnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}